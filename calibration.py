import cv2
import os
import re
import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict

DATA = {
    # 30
    (0,0,0):[(412,368), (1546,267), (), (), (), (), (), ()], 
    (-3.6,0,0):[(587,367), (1555,376), (), (1473,692),  (), (1095,1487), (), ()], 
    #(0,-7.2,0):[(423,208), (1876,254), (), (1178,785),  (702,1520), (), (), (1390,2025)], 
    (0,-6.245,0):[(423,208), (1876,254), (), (1178,785),  (702,1520), (), (), (1390,2025)], 
    # 600
    (0,-3.6,0):[(418,276), (1707,261), (), (1330,780),  (), (), (), (1165,2037)], 
    (-2.7,-3.6,0):[(), (), (), (),  (), (), (), (1160,2140)], 
    #(0,-3.9,0):[(), (), (), (),  (915,1616), (), (), ()], 
    #(-3.6,-4.8,0):[(), (), (), (),  (956,1484), (), (), ()], 
    (-3.6,-3.6,0):[(566,275), (1748,370), (), (1341,697),  (), (), (), ()], 
    (0,-10.2,0):[(427,159), (), (), (1027,789),  (506,1431), (), (), (1603,2014)], 
    (-3.6,-10.2,0):[(541,158), (), (), (1079,704),  (622,1353), (), (), ()], 
    (-3.3,-10.2,0):[(), (), (), (),  (), (), (), (1673,2128)], 

    # 1050
    (0,-13.69,0):[(429,118), (), (), (),  (343,1357), (), (), (1796,1999)], 
    (-3.6,-13.69,0):[(531,118), (), (), (),  (467,1294), (), (), ()], 
    (-3.3,-13.69,0):[(), (), (), (),  (), (), (), (1890,2102)], 

    #3780
    (-6,-10.2,0):[(616,159), (), (), (1107,660),  (684,1313), (), (), ()], 
    (-6,-13.69,0):[(600,118), (), (), (989,663),  (538,1260), (), (), ()], 

    #4590
    (-6.9,-9.9,0):[(649,170), (), (), (1146,644),  (745,1313), (), (), ()], 
    (-6.9,-13.5,0):[(630,127), (), (), (1031,647),  (596,1260), (), (), ()], 

    #5580
    (-6.9,-6.3,0):[(676,224), (), (), (1263,640),  (918,1370), (), (), ()], 

    #6360
    (-6.9,-2.7,0):[(709,296), (), (), (1380,638),  (), (1012,1402), (), ()], 

    #7410
    (-3.3,0.9,0):[(573,394), (1508,362), (393,1054), (1508,700),  (), (1139,1499), (), ()], 
    (-6.9,0.9,0):[(754,393), (), (), (1498,634),  (), (1179,1401), (), ()], 

    #7980
    (-3.3,4.5,0):[(598,535), (1331,365), (409,918), (1642,696),  (), (), (833,2137), ()], 
    (-6.9,4.5,0):[(818,533), (), (243,915), (1615,630),  (), (1339,1401), (), ()], 
    (-5.4,4.5,0):[(), (1310,444), (), (),  (), (), (), ()], 
    (-5.7,-2.7,0):[(), (1720,453), (), (),  (), (), (), ()], 
    (-6.6,-1.8,0):[(), (1675,497), (), (),  (), (), (), ()], 

    #8850
    (-3.3,8.1,0):[(), (1162,369), (418,829), (1778,691),  (), (1521,1495), (548,2117), ()], 
    (-6.9,8.1,0):[(), (), (283,826), (1733,626),  (), (1494,1400), (), ()], 

    #9390
    (-3.3,11.7,0):[(), (1001,374), (425,768), (1912,687),  (), (1700,1493), (261,2097), ()], 
    (-6.9,11.7,0):[(), (), (310,763), (1851,623),  (), (1642,1399), (), ()], 

    #10410
    (-3.3,15.3,0):[(), (), (430,723), (),  (), (), (), ()], 
    (-6.9,15.3,0):[(), (), (330,719), (),  (), (1788,1405), (), ()], 

    #12210
    (-2.1,13.5,0):[(), (), (463,746), (),  (), (1817,1533), (142,2039), ()], 
    (-2.1,17.1,0):[(), (), (463,705), (),  (), (), (), ()], 
    (-5.7,17.1,0):[(), (), (371,702), (),  (), (), (), ()], 

    #16380
    (-8.4,8.1,0):[(), (), (223,825), (1718,604),  (), (1485,1370), (), ()], 
    (-8.4,11.7,0):[(), (), (260,760), (1830,600),  (), (1625,1370), (), ()], 

    #18360
    (-8.1,4.5,0):[(), (), (187,915), (1607,613),  (), (1340,1378), (), ()], 

    #18930
    (-8.1,0.9,0):[(), (), (113,1053), (1495,617),  (), (1188,1377), (), ()], 

    #21060
    (-8.4,-4.5,0):[(740,256), (), (), (1326,619),  (), (), (), ()], 

    #22230
    #(-8.7,-8.1,0):[(713,193), (), (), (1215,618),  (858,1314), (), (), ()], 

    #22800
    (-8.7,-11.09,0):[(682,147), (), (), (1104,623),  (701,1264), (), (), ()], 

    #26970
    #(-1.5,-15,0):[(460,113), (), (), (),  (364,1329), (), (), (1848,2027)], 
    #(-1.5,-15,0):[(460,113), (), (), (),  (), (), (), (1848,2027)],  
    (-1.292,-14.431,0):[(460,113), (), (), (),  (364,1329), (), (), (1848,2027)], ### here

    #27660
    (2.4,-11.12,0):[(348,153), (), (), (),  (380,1458), (), (), (1586,1946)], 

    #27660
    #(2.4,-7.8,0):[(336,203), (1856,197), (), (1127,682),  (585,1590), (), (), (1396,1956)], 
    (2.4,-6.63,0):[(336,203), (1856,197), (), (),  (585,1590), (), (), (1396,1956)], 

    #28530
    #(2.4,-4.2,0):[(), (1705,206), (), (1298,856),  (), (), (), (1197,1966)], 
    (2.4,-4.2,0):[(), (1705,206), (), (1298,856),  (), (), (), (1197,1966)], 

    #31470
    (8.4,-2.7,0):[(45,304), (1615,111), (), (),  (), (), (), (1133,1846)], 

    #32310
    #(4.8,-8.1,0):[(), (1835,153), (), (1074,953),  (), (), (), (1393,1903)], 
    (4.8,-7.64,0):[(), (1835,153), (), (1074,953),  (), (), (), (1393,1903)], 

    #33000
    #(1.2,-8.1,0):[(380,198), (1888,224), (), (1130,822),  (615,1538), (), (), (1424,1990)], 
    (1.2,-7.06,0):[(380,198), (1888,224), (), (1130,822),  (615,1538), (), (), (1424,1990)],

    #33720
    (1.2,-11.6,0):[(387,149), (), (), (969,826),  (419,1444), (), (), (1621,1977)], 

    #34860
    (1.2,-13.5,0):[(390,125), (), (), (),  (321,1397), (), (), (1729,1968)], 
    
    #38850
    (0,-0.3,0):[(417,352), (1568,268), (), (),  (), (), (), (970,2048)], 

    #40020
    (3.3,3.9,0):[(210,498), (1401,200), (697,943), (1678,866),  (), (), (797,1906), ()], 

    #40650
    (6.9,3.9,0):[(), (1413,140), (), (),  (), (), (761,1824), ()], 

    #41730
    (8.4,3.9,0):[(), (1417,121), (), (),  (), (), (749,1799), ()], 

    #42780
    (4.8,6.9,0):[(), (1305,179), (718,865), (),  (), (), (617,1859), ()], 

    #43320
    #(1.2,6.9,0):[(), (1276,248), (583,861), (1788,793),  (), (), (634,1953), ()], 
    (1.2,6.9,0):[(), (1276,248), (583,861), (1788,793),  (), (), (), ()],

    #44220
    (-2.4,3.3,0):[(548,473), (1403,343), (438,965), (1595,712),  (), (1255,1521), (924,2111), ()], 

    #45720
    (1.2,10.5,0):[(), (1140,257), (563,794), (),  (), (), (403,1943), ()], 
    (0,4.5,0):[(408,523), (1362,274), (546,923), (1665,764),  (), (1315,1611), (802,2004), ()], 
    (1.2,8.1,0):[(), (1228,251), (575,835), (1841,791),  (), (), (556,1948), ()], 

    #46470
    (1.2,13.8,0):[(), (1008,267), (548,744), (),  (), (), (174,1933), ()], 

    #47790
    #(4.8,17.1,0):[(), (), (626,713), (),  (), (), (47,1834), ()], 
    (4.426,17.1,0):[(), (), (626,713), (),  (), (), (47,1834), ()], 

}

DATA_HIGH = {

        # Middle Box up
        (0.0,0.0,0.606):[(406,276), (587,185), (597,463), (524,159), (), (19,445), (), ()],
        (0.51,0.0,0.606):[(305,276), (584,144), (716,466), (527,214), (), (), (), (86,298)],
        (0.51,-0.51,0.606):[(324,228), (668,140), (), (430,215), (), (), (), (107,250)],
        (0.0,-0.51,0.606):[(414,229), (678,180), (), (434,161), (), (), (), ()],

        # Toy Shelf
        # Right
        (-1.58, -3.898, 0.786):[(606,24), (), (), (), (496,34), (), (), ()],
        # Left
        (1.210, -3.899, 0.786):[(), (), (), (), (), (), (), (816,138)],
        (1.215, -3.905, 1.057):[(), (), (), (), (), (), (), (818,76)],
        (1.216, -3.908, 1.372):[(), (), (), (), (), (), (), (825,21)],

        # Cab corner Sink
        (-1.783, -2.984, 0.942):[(645,36), (), (), (), (675,40), (), (), ()],  
        (-2.965, -2.984, 0.942):[(795, 37), (), (), (), (775,1), (), (), ()],  

        # Cab Stripes
        (-2.167, 0.581, 0.894):[(909,281), (435, 450), (88, 305), (), (), (267, 155), (), ()],  
        (-2.169, 0.581, 0.125):[(), (), (), (), (), (276,277), (), ()],  
        (-2.929, 0.581, 0.894):[(), (), (), (), (), (285,115), (), ()],
        (-2.170, 2.162, 0.894):[(), (), (), (), (), (549,159), (), ()],
         # Right
        (-2.931, 3.240, 0.903):[(), (), (156,102), (), (), (694,123), (), ()],
        # Cabinet near stripes
        (-2.167, -0.281, 0.129):[(807,323), (), (), (), (), (128, 277), (), ()], 
        (-2.205, -0.246, 0.825):[(), (), (), (), (), (121, 161), (), ()], 
        (-2.809, -0.246, 0.825):[(), (), (), (), (), (150,128), (), ()], 

        # Cube Cab
        # Red - right, left
        (-2.179, 3.012, 0.702):[(), (), (250,145), (), (), (682,192), (), ()],  
        (-2.179, 2.274, 0.702):[(), (), (), (), (), (565,190), (), ()], 
        # Orange - right, left
        (-2.179, 3.012, 0.602):[(), (), (251,157), (), (), (679,208), (), ()],  
        (-2.179, 2.274, 0.602):[(), (), (), (), (), (563,206), (), ()], 
        # yellow - right, left
        (-2.179, 3.012, 0.502):[(), (), (252,170), (886, 3), (), (677,224), (), ()],  
        (-2.179, 2.274, 0.502):[(), (), (), (796,6), (), (562,222), (), ()], 
        # green - right, left
        (-2.179, 3.012, 0.400):[(), (), (252,182), (881,17), (), (674,239), (), ()],  
        (-2.179, 2.274, 0.400):[(), (), (), (791,19), (), (560,238), (), ()], 
        # blue - right, left
        (-2.179, 3.012, 0.307):[(), (), (253,194), (877,29), (), (672,254), (), ()],  
        (-2.179, 2.274, 0.307):[(), (), (), (788,31), (), (559,253), (), ()], 
        # purple - right, left
        (-2.179, 3.012, 0.146):[(), (), (255,213), (870,49), (), (670,278), (), ()],  
        (-2.179, 2.274, 0.146):[(), (), (), (782,51), (), (557,277), (), ()], 

        # Door joint
        #(1.141, 4.401, 0.299):[(), (), (), (), (), (), (49,157), ()], 
        #(1.141, 4.401, 0.419):[(), (), (), (), (), (), (47,134), ()], 

        # Wall opposite of sink
        (1.209, -3.383, 0.144):[(), (), (), (), (145,395), (), (), ()], 

        # Wall behind chair
        (1.208, 3.109, 0.144):[(), (), (), (), (), (), (338,197), ()], 
        (1.168, 4.417, 0.149):[(), (), (), (), (), (), (56,183), ()], 

        (1.2, 3.11, 0.0488):[(), (), (), (), (), (), (333, 216), ()], 

        # Dot Wall next to cabinet 
        (1.69, -3.37, 0.392):[(), (), (), (), (21, 394), (), (), (674, 179)], # (Left)
        (1.38, -3.37, 0.392):[(), (), (), (), (100, 357), (), (), (692,198)], # (Right)

        # Table below small cabinet
        (2.14, -1.9, 0.5):[(95,142), (836,41), (), (), (), (), (), (403,140)], # wall-left
        (1.57, -1.9, 0.5):[(), (863, 68), (), (40, 425), (), (), (), (420,173)], # way-left
        (2.14, -2.82, 0.5):[(), (), (), (), (), (), (), (562, 136)], # wall-right
        (1.57, -2.82, 0.5):[(), (), (), (), (158,416), (), (), (590, 167)], # way-right

        # Small cab top
        (1.85, -2.27, 0.78):[(), (913, 9), (), (), (196, 456), (), (), (481,103)], # wall-left
        (1.69, -2.27, 0.78):[(), (922, 16), (), (), (239, 429), (), (), (486,111)], # way-left
        (1.85, -2.47, 0.78):[(), (942, 8), (), (), (144,427), (), (), (516,103)], # wall-right
        (1.69, -2.47, 0.78):[(), (950, 14), (), (), (188, 400), (), (), (521,110)], # way-right

        (1.85, -2.67, 0.697):[(), (), (), (), (172,465), (), (), ()], # middle -wall

        # Dot Wall next to door
        (1.21, 2.97, 0.392):[(), (182,144), (), (), (), (), (362,151), ()],

        # Sticker Door
        (0.48, 4.41, 0.392):[(), (), (574, 140), (), (), (), (), ()], # (Left)
        (0.902, 4.41, 0.392):[(), (), (616, 143), (), (), (), (29, 156), ()], # (Right)

        # Feet Bench
        (-2.32, -2.59, 0.0488):[(), (), (), (), (747,205), (), (), ()], # (Left)
        (-2.32, -1.36, 0.0488):[(), (), (), (), (951,270), (), (), ()], # (Right)

        # Corner cab next to sink
        #(-2.97, -2.34, 1.01):[(), (), (), (), (884,15), (), (), ()], # (Left)

        # Dark blue cushion
        (-0.708,-3.78,0.615):[(), (), (), (), (408,115), (), (), ()], # (Left)
        # Red cushion
        (0.773,-3.41,0.62):[(), (), (), (), (217,232), (), (), ()], # 
        (0.773,-3.41,0.0488):[(), (), (), (), (223,361), (), (), ()], # 

        #############################
        # Door Knob
        #(1.01, 17.33, 4.042):[(), (), (560, 70), (), (), (), (), ()],  
        #(-8.39, 2.119, 3.277):[(), (10,199), (), (), (), (), (), ()],  

        # Blue Bar
        #(-0.49, 17.0, 4.37):[(), (), (517, 59), (), (), (), (), ()],  
        #(-1.91, 17.0, 4.37):[(), (), (476, 57), (), (), (), (), ()], 
        #(-2.87, 17.0, 4.37):[(), (), (451,55), (), (), (), (), ()], 
        #(-3.8, 17.0, 4.37):[(), (), (425, 54), (), (), (), (), ()], 
        #(-4.76, 17.0, 4.37):[(), (), (398, 52), (), (), (), (), ()], 

        #(-0.49, 17.0, 1.43):[(), (), (512, 136), (), (), (), (), ()],  
        #(-1.91, 17.0, 1.43):[(), (), (473, 134), (), (), (), (), ()], 
        #(-2.87, 17.0, 1.43):[(), (), (448, 133), (), (), (), (), ()], 
        #(-3.8, 17.0, 1.43):[(), (), (423, 131), (), (), (), (), ()], 
        #(-4.76, 17.0, 1.43):[(), (), (397,130), (), (), (), (), ()], 
        #(-8.39, 2.119, 3.277):[(), (10,199), (), (), (), (), (), ()],  


        # Cab close to stripes
        #(-9.23, -1.02, 2.9):[(847,212), (706,487), (), (), (), (121,162), (), ()],
        #(-9.16, 2.15, 2.9):[(), (439,488), (), (), (), (), (), ()],
        #(-11.56, -0.98, 2.9):[(), (), (), (), (), (149,128), (), ()],
        #(-11.48, 14.23, 3.01):[(), (), (156,102), (), (), (), (), ()],

}

DATA_MAT = {
    # X : crocodile axis, Y: white board axis
    (0.0009, 0.002, 0.0851):[(), (938, 253), (), (), (), (), (), ()], # 0, 0
    (0.202, 0.204, 0.0851):[(751, 12), (836, 255), (722,454), (110, 453), (), (), (), ()], # 1, 1
    (0.4039, 0.4069, 0.0851):[(691, 73), (735, 258), (632,405), (191, 379), (), (), (), ()], # 2, 2
    (0.6054, 0.6087, 0.0851):[(629, 136), (638, 260), (549,360), (267, 309), (), (), (), ()], # 3, 3
    (0.8071, 0.8111, 0.0851):[(564, 201), (543, 261), (472,317), (339, 243), (), (), (), ()], # 4, 4
    (1.008, 1.013, 0.0851):[(496, 270), (452, 263), (401,277), (406, 181), (), (), (), ()], # 5, 5
    (1.210, 1.215, 0.0851):[(425, 342), (363, 264), (334,241), (470,123), (), (), (), ()], # 6, 6
    (1.411, 1.4170, 0.0851):[(350, 417), (276, 267), (271,206), (530,67), (), (), (), ()], # 7, 7
    (1.6130, 1.6195, 0.0851):[(272, 495), (192, 267), (213,173), (588, 13), (), (), (), ()], # 8, 8
    (1.814, 1.8212, 0.0851):[(), (), (156,139), (), (), (), (), ()], # 9, 9

    (0.0142, 1.0257, 0.0851):[(857, 257), (667, 422), (350, 487), (68,184), (), (), (), ()], # 5, 0
    (1.8036, 1.0025, 0.0851):[(214, 280), (323, 167), (429,152), (666, 177), (), (), (), ()], # 5, 9
    (1.0189, 1.8315, 0.0851):[(), (219, 386), (91, 266), (), (), (), (), ()], # 9, 5
    (1.7932, 0.1838, 0.0851):[(227, 36), (), (), (699, 436), (), (), (), ()], # 1, 9

    (1.3984, 0.3941, 0.0851):[(356, 87), (532, 138), (635, 217), (550,370), (), (), (), ()], # 2, 7
    (1.2021, 0.6013, 0.0851):[(423, 144), (519, 184), (559, 248), (477,305), (), (), (), ()], # 3, 6
    (1.0059, 0.8088, 0.0851):[(494, 204), (505, 235), (478, 280), (407,242), (), (), (), ()], # 4, 5
    (0.8096, 1.0159, 0.0851):[(567, 267), (490, 290), (392, 314), (340,181), (), (), (), ()], # 5, 4
    (0.6134, 1.2232, 0.0851):[(645, 334), (472, 353), (300, 351), (276,123), (), (), (), ()], # 6, 3
    (0.4172, 1.4304, 0.0851):[(728, 405), (453, 421), (201, 388), (213, 67), (), (), (), ()], # 7, 2
    (0.2210, 1.6380, 0.0851):[(815, 479), (431, 498), (94, 429), (), (), (), (), ()], # 8, 1
   
}


PARENT_BOX_B_1 = [685, 418, 960, 540]
PARENT_BOX_B_2 = [314, 0, 500,127]

PARENT_BOX_M_1 = [175, 49, 251, 127]
PARENT_BOX_M_2 = [619, 115, 683, 184]

def _set_axes_radius(ax, origin, radius):
    x, y, z = origin
    #ax.set_xlim3d([x - radius, x + radius])
    #ax.set_ylim3d([y - radius, y + radius])
    #ax.set_zlim3d([z - radius, z + radius])
    ax.set_xlim3d([-8, 8])
    ax.set_ylim3d([-8, 8])
    ax.set_zlim3d([0, 5 ])
    #ax.view_init(-40, -90.0)

def set_axes_equal(ax: plt.Axes):
    """Set 3D plot axes to equal scale.

    Make axes of 3D plot have equal scale so that spheres appear as
    spheres and cubes as cubes.  Required since `ax.axis('equal')`
    and `ax.set_aspect('equal')` don't work on 3D.
    """
    #print(ax.get_zlim3d())
    limits = np.array([
        ax.get_xlim3d(),
        ax.get_ylim3d(),
        ax.get_zlim3d(),
    ])
    origin = np.mean(limits, axis=1)
    radius = 0.5 * np.max(np.abs(limits[:, 1] - limits[:, 0]))
    _set_axes_radius(ax, origin, radius)

def make_video(video, frame = 0, dirs = "images/"):
    output = dirs
    cap = cv2.VideoCapture(video)
    ret = cap.set(1, frame)
    ret, frame = cap.read()
    if not ret:
        print("error in frame")
        exit()
    h, w, _ = frame.shape

    if not os.path.exists(output):
        os.makedirs(output)

    h, w, _ = frame.shape

    frame_nw = frame[:h//4, :w//2]
    frame_ne = frame[:h//4, w//2:]
    frame_sw = frame[h//4:h//2, :w//2]
    frame_se = frame[h//4:h//2, w//2:]

    cv2.imwrite(output + "/0.png", frame_nw)
    cv2.imwrite(output + "/1.png", frame_ne)
    cv2.imwrite(output + "/2.png", frame_sw)
    cv2.imwrite(output + "/3.png", frame_se)       

    frame_nw = frame[h//2:3*h//4, :w//2]
    frame_ne = frame[h//2:3*h//4, w//2:]
    frame_sw = frame[3*h//4:, :w//2]
    frame_se = frame[3*h//4:, w//2:]

    cv2.imwrite(output + "/4.png", frame_nw)
    cv2.imwrite(output + "/5.png", frame_ne)
    cv2.imwrite(output + "/6.png", frame_sw)
    cv2.imwrite(output + "/7.png", frame_se)         

    cap.release()
    return h, w

def plot_points(directory, data):
    
    for i in range(8):
        im = os.path.join(directory, "{}.png".format(i))
        im0 = cv2.imread(im)
        
        for p3d, p2d in data.items():

            if len(p2d[i]) == 0: continue
            x ,y = p2d[i]
            x3d, y3d, z3d = p3d
            im0 = cv2.circle(im0, (x,y), radius=1, color=(0, 0, 255), thickness=-1)
            cv2.putText(im0,"({}, {}, {})".format(x3d, y3d, z3d), (x,y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, 10)
        if i == 1:
            cv2.rectangle(im0, (PARENT_BOX_M_1[0], PARENT_BOX_M_1[1]), 
                          (PARENT_BOX_M_1[2], PARENT_BOX_M_1[3]), (255,255,255), 2)
        elif i == 2:
            cv2.rectangle(im0, (PARENT_BOX_M_2[0], PARENT_BOX_M_2[1]), 
                          (PARENT_BOX_M_2[2], PARENT_BOX_M_2[3]), (255,255,255), 2)
        elif i == 5:
            cv2.rectangle(im0, (PARENT_BOX_B_1[0], PARENT_BOX_B_1[1]),
                          (PARENT_BOX_B_1[2], PARENT_BOX_B_1[3]), (255,255,255), 2)
        elif i == 6:
            cv2.rectangle(im0, (PARENT_BOX_B_2[0], PARENT_BOX_B_2[1]), 
                          (PARENT_BOX_B_2[2], PARENT_BOX_B_2[3]), (255,255,255), 2)
        cv2.imwrite(os.path.join(directory, "{}_plot.png".format(i)),im0)

    
    return


def cal_cam(directory, data1, plot = False, offset_cam=0):
    im0 = os.path.join(directory, "0.png")
    im1 = os.path.join(directory, "1.png")
    im2 = os.path.join(directory, "2.png")
    im3 = os.path.join(directory, "3.png")
    im4 = os.path.join(directory, "4.png")
    im5 = os.path.join(directory, "5.png")
    im6 = os.path.join(directory, "6.png")
    im7 = os.path.join(directory, "7.png")

    objpoints, imgpoints = {"all":[], 0:[], 1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[]}, {0:[], 1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[]}
    for p3d, p2d in data1.items():
        objpoints["all"].append(list(p3d))
        for i in range(len(p2d)):
            if len(p2d[i]) != 0:
                objpoints[i].append(list(p3d))
                imgpoints[i].append(list(p2d[i]))
    for i in imgpoints:
        imgpoints[i] = np.array(imgpoints[i]).astype('float32')


    vec = [0.0, 0.0, 1.0]
    cc = ["r", "g", "b", "y", "r", "g", "b", "y"]

    if plot:
        fig = plt.figure()
        ax = plt.axes(projection='3d')    
    
    cams = {}

    for i, im in enumerate([im0, im1, im2, im3, im4, im5, im6, im7]):
        #if i != 4 : continue
        p3d = np.array(objpoints[i]).astype('float32')
        if len(p3d) == 0: continue
        im = cv2.imread(im)
        size = im.shape
        dim = (size[1], size[0])
        print(i,dim)
        #print(i, p3d.shape, imgpoints[i].shape)
        mtx0 = cv2.initCameraMatrix2D([p3d],[imgpoints[i]], dim)
        #print(i + offset_cam, mtx0)
        #calibrate cameras
        err, mtx0, dist, r0, T0 = cv2.calibrateCamera([p3d], [imgpoints[i]], dim, mtx0, None, flags=cv2.CALIB_USE_INTRINSIC_GUESS) 
        #err, mtx0, dist, r0, T0 = cv2.calibrateCamera([p3d], [imgpoints[i]], dim, None, None) 
        r0, T0 = r0[0], T0[0]

        print("camera ", i+ offset_cam, err)
        R0 = cv2.Rodrigues(r0)[0]
        #check_parameters(mtx0, dist, R0, T0, imgpoints[i], p3d)
        
        c0 = -np.matrix(R0).T * np.matrix(T0)
        print("Camera position ", c0)
        #ax.quiver(c0[0], c0[1], c0[2], uvw0[0], uvw0[1], uvw0[2], length=2.0, normalize=True)
        uvw = np.dot(R0.T , np.array(vec))
        K = mtx0.dot(np.hstack((R0,T0)))

        c0 = np.array(c0.T)[0] #np.array([c0[0], c0[1], c0[2]])
        if plot:
            ax.scatter3D(c0[0], c0[1], c0[2], c=cc[i])
            ax.quiver(c0[0], c0[1], c0[2], uvw[0], uvw[1], uvw[2], length=2.0, normalize=True, color=cc[i])
        cams[i + offset_cam] = {"T":c0, "R":R0, "u":uvw, "K":K, "mtx":mtx0, "r":r0, "t":T0,  "dist":dist}
        
    if plot:
        p3d = np.array(objpoints["all"]).astype('float32')
        ax.scatter3D(p3d[:, 0], p3d[:, 1], p3d[:, 2], c='r')
        x, y, z = p3d[0, 0], p3d[0, 1], p3d[0, 2]
        label = '(%d, %d, %d)' % (x, y, z)
        ax.text(x, y, z, label)
        x, y, z = p3d[-1, 0], p3d[-1, 1], p3d[-1, 2]
        label = '(%d, %d, %d)' % (x, y, z)
        ax.text(x, y, z, label)

        x, y, z = 0, 0, 0
        label = '(%d, %d, %d)' % (x, y, z)
        ax.text(x, y, z, label)
        ax.set_box_aspect([1,1,1])
        set_axes_equal(ax)
        plt.show()

    return cams

def bb_iou(boxA, boxB):
    # determine the (x, y)-coordinates of the intersection rectangle
    xA = max(boxA[0], boxB[0])
    yA = max(boxA[1], boxB[1])
    xB = min(boxA[2], boxB[2])
    yB = min(boxA[3], boxB[3])

    # compute the area of intersection rectangle
    interArea = abs(max((xB - xA, 0)) * max((yB - yA), 0))
    if interArea == 0:
        return 0
    # compute the area of both the prediction and ground-truth
    # rectangles
    boxAArea = abs((boxA[2] - boxA[0]) * (boxA[3] - boxA[1]))
    boxBArea = abs((boxB[2] - boxB[0]) * (boxB[3] - boxB[1]))

    # compute the intersection over union by taking the intersection
    # area and dividing it by the sum of prediction + ground-truth
    # areas - the interesection area
    iou = interArea / float(boxAArea + boxBArea - interArea)

    # return the intersection over union value
    return iou


def modify_data(data, w, h, scale3D = None):
    new_data = {}
    for p3d, p2d in data.items():
        if scale3D is not None:
            p3d = tuple([round(x1*s, 3) for x1, s in zip(p3d, scale3D)])
            p3d = (p3d[0], p3d[1], 0.0488)
        new_data[p3d] = [()]*8
        for i in range(len(p2d)):
            if len(p2d[i]) == 0: continue
            x ,y = p2d[i]
            if i == 1:
                x = x-w//2
            elif i == 2:
                y = y-h//4   
            elif i == 3:
                x = x-w//2
                y = y-h//4   
            elif i == 4:
                y = y-h//2
            elif i == 5:
                x = x-w//2
                y = y-h//2
            elif i == 6:
                y = y-(3*h//4)
            elif i == 7:
                x = x-w//2
                y = y-(3*h//4)
            p = (x,y)
            new_data[p3d][i] = p

    return new_data

def change_setup(data):
    for p3d, p2d in data.items():
        p2d[:4] = [()]*4
    data.update(DATA_MAT)
    return data

def calibrate(video, plot = False, output_dir = "output_calibration/", setup = "s"):

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    prefix = "room"
    if setup == 'm': prefix = "mat"
    name = video.split("/")[-1]
    name = name.split(".")[0]
    sess_name = re.findall(r'\d\d_\d\d', name)[0]
    dirs = os.path.join(output_dir, sess_name)

    h1, w1 = make_video(video, dirs = dirs, frame = 200)

    data = modify_data(DATA, w1, h1, scale3D = [1.16/4.5, 1.16/4.5, 1.0])
    data.update(DATA_HIGH)
    if setup == 'm':
        data = change_setup(data)
    
    if plot: 
        plot_points(dirs, data)
    cams = cal_cam(dirs, data, plot = plot)
    np.save(output_dir + "/camera_{}_".format(prefix) + sess_name, cams, allow_pickle=True)

    return cams

if __name__ == "__main__":
    # Path to a video for getting dimension and fps
    datadir = "../data/dataset/19_04"
    video = os.path.join(datadir,"DevEv_19_04_trim.mp4")
    # setup = m/s -> mat/room view  
    calibrate(video, plot = True, setup="m")
 